# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Runner cleanup and preparation
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

          # Clean Docker resources
          docker system prune -af

          echo "Disk space after cleanup:"
          df -h

  lint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install ruff mypy

      - name: Fix code with Ruff
        run: |
          source .venv/bin/activate
          # Run all fixable rules at once
          ruff check --fix fast_api_template

      - name: Check code with Ruff
        run: |
          source .venv/bin/activate
          # Verify all issues are resolved
          ruff check --output-format=github fast_api_template

      - name: Check formatting
        run: |
          source .venv/bin/activate
          ruff format --check --line-length 120 fast_api_template tests

      - name: Type check with mypy
        run: |
          source .venv/bin/activate
          mypy --ignore-missing-imports fast_api_template

  security:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install bandit safety

      - name: Run bandit
        run: |
          source .venv/bin/activate
          bandit -r fast_api_template -x fast_api_template/tests

      - name: Run Safety vulnerability scanner
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: --full-report

  test:
    needs: [lint, security]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Set up proper UV caching with latest version
      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      # Install test dependencies directly from PyPI
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[test]"

      - name: Test with pytest
        run: |
          source .venv/bin/activate
          python -m pytest -v --cov=fast_api_template --cov-report=xml tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Uncomment to enable pushing to Docker Hub
      # - name: Login to Docker Hub
      #   if: github.ref == 'refs/heads/main'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and test dev image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          # push: ${{ github.ref == 'refs/heads/main' }}  # Uncomment to enable pushing
          tags: fast_api_template:dev
          # tags: ${{ secrets.DOCKERHUB_USERNAME }}/fast_api_template:dev  # Uncomment for Docker Hub
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and test prod image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          # push: ${{ github.ref == 'refs/heads/main' }}  # Uncomment to enable pushing
          tags: fast_api_template:latest
          # tags: ${{ secrets.DOCKERHUB_USERNAME }}/fast_api_template:latest  # Uncomment for Docker Hub
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trivy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t fast_api_template:${{ github.sha }} -f Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "fast_api_template:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
